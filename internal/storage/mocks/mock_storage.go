// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-burinskiy/gophermart/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ilya-burinskiy/gophermart/internal/models"
	pgx "github.com/jackc/pgx/v5"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CreateBalanceTx mocks base method.
func (m *MockStorage) CreateBalanceTx(arg0 context.Context, arg1 pgx.Tx, arg2, arg3 int) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalanceTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalanceTx indicates an expected call of CreateBalanceTx.
func (mr *MockStorageMockRecorder) CreateBalanceTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalanceTx", reflect.TypeOf((*MockStorage)(nil).CreateBalanceTx), arg0, arg1, arg2, arg3)
}

// CreateOrder mocks base method.
func (m *MockStorage) CreateOrder(arg0 context.Context, arg1 int, arg2 string, arg3 models.OrderStatus) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStorageMockRecorder) CreateOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStorage)(nil).CreateOrder), arg0, arg1, arg2, arg3)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context, arg1, arg2 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1, arg2)
}

// CreateWithdrawalTx mocks base method.
func (m *MockStorage) CreateWithdrawalTx(arg0 context.Context, arg1 pgx.Tx, arg2 int, arg3 string, arg4 int) (models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawalTx indicates an expected call of CreateWithdrawalTx.
func (mr *MockStorageMockRecorder) CreateWithdrawalTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalTx", reflect.TypeOf((*MockStorage)(nil).CreateWithdrawalTx), arg0, arg1, arg2, arg3, arg4)
}

// FindBalanceByUserID mocks base method.
func (m *MockStorage) FindBalanceByUserID(arg0 context.Context, arg1 int) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBalanceByUserID indicates an expected call of FindBalanceByUserID.
func (mr *MockStorageMockRecorder) FindBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBalanceByUserID", reflect.TypeOf((*MockStorage)(nil).FindBalanceByUserID), arg0, arg1)
}

// FindBalanceByUserIDTx mocks base method.
func (m *MockStorage) FindBalanceByUserIDTx(arg0 context.Context, arg1 pgx.Tx, arg2 int) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBalanceByUserIDTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBalanceByUserIDTx indicates an expected call of FindBalanceByUserIDTx.
func (mr *MockStorageMockRecorder) FindBalanceByUserIDTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBalanceByUserIDTx", reflect.TypeOf((*MockStorage)(nil).FindBalanceByUserIDTx), arg0, arg1, arg2)
}

// FindOrderByNumber mocks base method.
func (m *MockStorage) FindOrderByNumber(arg0 context.Context, arg1 string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByNumber", arg0, arg1)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByNumber indicates an expected call of FindOrderByNumber.
func (mr *MockStorageMockRecorder) FindOrderByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByNumber", reflect.TypeOf((*MockStorage)(nil).FindOrderByNumber), arg0, arg1)
}

// FindUserByLogin mocks base method.
func (m *MockStorage) FindUserByLogin(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLogin indicates an expected call of FindUserByLogin.
func (mr *MockStorageMockRecorder) FindUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLogin", reflect.TypeOf((*MockStorage)(nil).FindUserByLogin), arg0, arg1)
}

// UpdateBalanceCurrentAmountTx mocks base method.
func (m *MockStorage) UpdateBalanceCurrentAmountTx(arg0 context.Context, arg1 pgx.Tx, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceCurrentAmountTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceCurrentAmountTx indicates an expected call of UpdateBalanceCurrentAmountTx.
func (mr *MockStorageMockRecorder) UpdateBalanceCurrentAmountTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceCurrentAmountTx", reflect.TypeOf((*MockStorage)(nil).UpdateBalanceCurrentAmountTx), arg0, arg1, arg2, arg3)
}

// UpdateBalanceWithdrawnAmountTx mocks base method.
func (m *MockStorage) UpdateBalanceWithdrawnAmountTx(arg0 context.Context, arg1 pgx.Tx, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceWithdrawnAmountTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceWithdrawnAmountTx indicates an expected call of UpdateBalanceWithdrawnAmountTx.
func (mr *MockStorageMockRecorder) UpdateBalanceWithdrawnAmountTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceWithdrawnAmountTx", reflect.TypeOf((*MockStorage)(nil).UpdateBalanceWithdrawnAmountTx), arg0, arg1, arg2, arg3)
}

// UpdateOrderTx mocks base method.
func (m *MockStorage) UpdateOrderTx(arg0 context.Context, arg1 pgx.Tx, arg2 int, arg3 models.OrderStatus, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderTx indicates an expected call of UpdateOrderTx.
func (mr *MockStorageMockRecorder) UpdateOrderTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTx", reflect.TypeOf((*MockStorage)(nil).UpdateOrderTx), arg0, arg1, arg2, arg3, arg4)
}

// UserOrders mocks base method.
func (m *MockStorage) UserOrders(arg0 context.Context, arg1 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrders", arg0, arg1)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrders indicates an expected call of UserOrders.
func (mr *MockStorageMockRecorder) UserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrders", reflect.TypeOf((*MockStorage)(nil).UserOrders), arg0, arg1)
}

// UserWithdrawals mocks base method.
func (m *MockStorage) UserWithdrawals(arg0 context.Context, arg1 int) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserWithdrawals indicates an expected call of UserWithdrawals.
func (mr *MockStorageMockRecorder) UserWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserWithdrawals", reflect.TypeOf((*MockStorage)(nil).UserWithdrawals), arg0, arg1)
}

// WithinTranscaction mocks base method.
func (m *MockStorage) WithinTranscaction(arg0 context.Context, arg1 func(context.Context, pgx.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTranscaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTranscaction indicates an expected call of WithinTranscaction.
func (mr *MockStorageMockRecorder) WithinTranscaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTranscaction", reflect.TypeOf((*MockStorage)(nil).WithinTranscaction), arg0, arg1)
}
